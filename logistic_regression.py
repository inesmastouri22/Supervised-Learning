# -*- coding: utf-8 -*-
"""Logistic Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1REUOFIb7bk9YirMfL-pWZH-7xW5xb7La
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

social_network_ads = pd.read_csv('SocialNetworkAds.csv')

social_network_ads

x = social_network_ads.iloc[:,[2,3]].values
y = social_network_ads.iloc[:,4].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1/3,random_state=0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
x_train = sc_x.fit_transform(x_train)
x_test = sc_x.transform(x_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(x_train,y_train)

y_pred = classifier.predict(x_test)
y_pred

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

# Prepare the mesh grid
x1, x2 = np.meshgrid(np.arange(start=x_train[:,0].min()-1, stop=x_train[:,0].max()+1, step=0.01),
                     np.arange(start=x_train[:,1].min()-1, stop=x_train[:,1].max()+1, step=0.01))

# Predicting over the grid
Z = classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape)

# Plotting the contour for decision boundary
plt.contourf(x1, x2, Z, alpha=0.75, cmap=ListedColormap(['blue', 'yellow']))  # Colors specified as a list of strings

# Setting the limits for the plot
plt.xlim(x1.min(), x1.max())
plt.ylim(x2.min(), x2.max())

# Plotting the training points
for i, j in enumerate(np.unique(y_train)):
    plt.scatter(x_train[y_train == j, 0], x_train[y_train == j, 1],
                c=ListedColormap(['red', 'green'])(i), label=j)

# Adding title and labels
plt.title('Logistic Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()

# Display the plot
plt.show()

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)
cm

